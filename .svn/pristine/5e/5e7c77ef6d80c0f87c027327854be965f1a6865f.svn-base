#encoding:utf-8
#override the MiniTest::Unit::TestCase initialize method
#wuhongliang
require 'iam'
require 'rexml/document'
class IamTestNameSpace<MiniTest::Unit::TestCase
    extend IAMAPI::IamFrame
    include IAMAPI::Reporter

    def initialize name
        super name
        #############################wuhongliang############################
        @iam_obj                =IAMAPI::IAM.new
        #http get
        #get userid
        @ts_url_userid          ="http://192.168.10.9:8082/userid.txt"
        #get code
        @ts_url_usercode        ="http://192.168.10.9:8082/code.txt"
        #manager add
        @ts_add_rs              = 1
        @ts_add_msg             = "添加成功"
        @ts_accformat_err       = "帐号格式错误"
        @ts_accformat_code      = "5003"
        @ts_accformat_err_dsc   = "E_ACCOUNT_FORMAT_ERROR"

        # {"err_code" => "5006", "err_msg" => "\u5E10\u53F7\u5DF2\u5B58\u5728", "err_desc" => "E_ACCOUNT_EXISTS_ERROR"}
        @ts_err_acc_exists      = "帐号已存在"
        @ts_err_acc_exists_code = "5006"
        @ts_err_acc_exists_desc = "E_ACCOUNT_EXISTS_ERROR"


        #############################wuhongliang############################
    end

    #设置按xml顺序来执行
    #重新定义test_order
    def self.test_order_xml!
        class << self
            undef_method :test_order if method_defined? :test_order
            define_method :test_order do
                :xml
            end
        end
    end

    #设置按xml顺序来执行
    #当test_order为:xml时按xml文件顺序来执行
    def self.runnable_methods
        methods = methods_matching(/^test_/)
        if self.test_order == :xml
            methods
        else
            super
        end
    end

    def operate(str=" ")
        puts "[#{Time.new.strftime('%Y-%m-%d %H:%M:%S')}] "+str.to_gbk
        yield
    end

    test_order_xml! #xml，按xml顺序执行
    # i_suck_and_my_tests_are_order_dependent! #alpha，按alpha顺序执行
end
